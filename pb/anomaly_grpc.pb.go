// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: anomaly.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnomsClient is the client API for Anoms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnomsClient interface {
	Expose(ctx context.Context, in *AnomRequest, opts ...grpc.CallOption) (*AnomResponse, error)
}

type anomsClient struct {
	cc grpc.ClientConnInterface
}

func NewAnomsClient(cc grpc.ClientConnInterface) AnomsClient {
	return &anomsClient{cc}
}

func (c *anomsClient) Expose(ctx context.Context, in *AnomRequest, opts ...grpc.CallOption) (*AnomResponse, error) {
	out := new(AnomResponse)
	err := c.cc.Invoke(ctx, "/pb.Anoms/Expose", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnomsServer is the server API for Anoms service.
// All implementations must embed UnimplementedAnomsServer
// for forward compatibility
type AnomsServer interface {
	Expose(context.Context, *AnomRequest) (*AnomResponse, error)
	mustEmbedUnimplementedAnomsServer()
}

// UnimplementedAnomsServer must be embedded to have forward compatible implementations.
type UnimplementedAnomsServer struct {
}

func (UnimplementedAnomsServer) Expose(context.Context, *AnomRequest) (*AnomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expose not implemented")
}
func (UnimplementedAnomsServer) mustEmbedUnimplementedAnomsServer() {}

// UnsafeAnomsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnomsServer will
// result in compilation errors.
type UnsafeAnomsServer interface {
	mustEmbedUnimplementedAnomsServer()
}

func RegisterAnomsServer(s grpc.ServiceRegistrar, srv AnomsServer) {
	s.RegisterService(&Anoms_ServiceDesc, srv)
}

func _Anoms_Expose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnomsServer).Expose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Anoms/Expose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnomsServer).Expose(ctx, req.(*AnomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Anoms_ServiceDesc is the grpc.ServiceDesc for Anoms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Anoms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Anoms",
	HandlerType: (*AnomsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Expose",
			Handler:    _Anoms_Expose_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "anomaly.proto",
}
